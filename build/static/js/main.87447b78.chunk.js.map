{"version":3,"sources":["assets/pokemon_logo.png","Start.js","assets/pokemon_wallpaper.jpeg","firebase.js","assets/check.png","components/PokeCard.js","components/PokeView.js","displayTime.js","Game.js","components/ScoreCard.js","End.js","Routes.js","index.js"],"names":["Start","useState","name","setName","src","pokeLogo","alt","className","htmlFor","type","id","value","onChange","e","target","to","pathname","state","firebaseApp","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","getStorage","database","getDatabase","gsRef","storageRef","selectMons","a","monIDs","monCalls","i","push","Math","floor","random","get","dataRef","Promise","all","pokeData","pickedPokes","mon","val","getPokePics","pokeList","pokemon","getDownloadURL","url","monURLs","pokePics","updateScores","latestScore","scoreList","score","_","isEqual","rawTime","splice","pop","set","getScores","scoreData","pokeID","boxPos","boxHeight","boxWidth","pokeCords","location","vertOverlap","min","max","horizOverlap","pokeCard","props","pokePic","pokeName","check","found","Check","PokeView","boxCords","foundPokes","foundFunction","style","top","left","map","index","onClick","msToTime","s","ms","secs","twoDigit","time","Game","setFoundPokes","pickedPokemon","setPickedPokemon","setPokePics","pokeCards","setPokeCards","boxView","setBoxView","startTime","useRef","Date","now","history","useHistory","useEffect","mons","pics","foundArray","PokeCard","getData","updateFound","checkFound","poke","indexOf","then","result","slice","concat","reduce","prev","cur","current","parentPos","element","xPos","yPos","tagName","xScroll","scrollLeft","document","documentElement","yScroll","scrollTop","offsetLeft","clientLeft","offsetTop","clientTop","offsetParent","x","y","getPosition","clientX","clientY","ScoreCard","pName","pScore","End","curScores","setCurScores","timeDisplay","setTimeDisplay","highScoreMessage","setHighScoreMessage","elapsedTime","playerName","displayTime","playerScore","message","scoreCard","Routes","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87447b78.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pokemon_logo.9e1438b4.png\";","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport pokeLogo from './assets/pokemon_logo.png'\n\n//pokemon black and white font provided by https://www.deviantart.com/mauriziovit/art/Pokemon-Black-and-White-Version-Font-291005220\n\nfunction Start() {\n  let [name, setName] = useState('');\n  const updateName = (e) => {\n    setName(e.target.value);\n  }\n\n  return (\n    <div>\n      <h1>Let's find </h1>\n      <img src={pokeLogo} alt='pokeLogo' className='poke-logo'></img>\n      <label htmlFor='pname'></label>\n      <input type='text' id='pname' name='pname' value={name} onChange={updateName}></input>\n        <Link \n          to={{\n            pathname: '/game',\n            state: { name }\n        }}\n          className='start-link'>Enter your name above and click to start</Link>\n        <h2>How to play: </h2>\n        <ul>\n          <li>You'll be asked to find 5 different Pokémon in a picture</li>\n          <li>Click where you think you've found one and select which Pokémon it is</li>\n          <li>You'll be told whether you're right or wrong</li>\n          <li>Keep playing until you find all 5. Quick! You're being timed!</li>\n        </ul>\n    </div>\n  );\n}\n\nexport default Start;\n","export default __webpack_public_path__ + \"static/media/pokemon_wallpaper.ba8f0f3b.jpeg\";","import { initializeApp } from 'firebase/app';\nimport { getDatabase, set, ref as dataRef, get } from 'firebase/database';\nimport { getDownloadURL, ref as storageRef, getStorage } from 'firebase/storage';\nimport _ from 'lodash';\n\nconst config = {\n  apiKey: \"AIzaSyDSDL34m1WEKMonuecyPZqmwhn36yoYgr0\",\n  authDomain: \"find-pokemon-67226.firebaseapp.com\",\n  databaseURL: \"https://find-pokemon-67226-default-rtdb.firebaseio.com\",\n  projectId: \"find-pokemon-67226\",\n  storageBucket: \"find-pokemon-67226.appspot.com\",\n  messagingSenderId: \"532150975651\",\n  appId: \"1:532150975651:web:d7b7bb9c00a0e1181bd316\",\n  measurementId: \"G-TWGH46RDE4\"\n  };\n\nconst firebaseApp = initializeApp(config);\nconst storage = getStorage(firebaseApp);\nconst database = getDatabase(firebaseApp);\n\nconst gsRef = storageRef(storage, 'gs://find-pokemon-67226.appspot.com');\n\n\n//249 pokemon, from ID 0-248\nasync function selectMons() {\n    let monIDs = [];\n    let monCalls = [];\n    for (let i = 0; i < 5; i++) {\n      monIDs.push(Math.floor(Math.random() * 249));\n      monCalls.push(get(dataRef(database, `pokemon/${monIDs[i]}`)));\n    }\n    let pokeData = await Promise.all(monCalls);\n    let pickedPokes = [];\n    for (let mon of pokeData) {\n      pickedPokes.push({id: mon.val().id, name: mon.val().name})\n    }\n    return pickedPokes;\n}\n\nasync function getPokePics(pokeList) {\n  let monCalls = [];\n  for (let pokemon of pokeList) {\n    monCalls.push(getDownloadURL(storageRef(gsRef, pokemon.name + '.png')))\n  }\n\n  let monURLs = await Promise.all(monCalls);\n  let pokePics = [];\n  for (let url in monURLs) {\n    pokePics.push({id: pokeList[url].id, src: monURLs[url]})\n  }\n  return pokePics;\n  }\n\n\nfunction updateScores (latestScore, scoreList) {\n\n  for (let score in scoreList) {\n    if (_.isEqual(scoreList[score], latestScore)) break;\n    if (scoreList[score].rawTime > latestScore.rawTime) {\n      scoreList.splice(score, 1, latestScore, scoreList[score]);\n      scoreList.pop();\n      break;\n    }\n  }\n\n  set(dataRef(database, 'high scores'), scoreList);\n  return scoreList;\n}\n\nasync function getScores() {\n  let scoreData = await (get(dataRef(database, 'high scores')));\n  let scoreList = scoreData.val();\n  return scoreList;\n}\n\n//check on this function\nasync function checkFound(pokeID, boxPos) {\n  const boxHeight = 110;\n  const boxWidth = 90;\n  let pokeData = await get(dataRef(database,`pokemon/${pokeID}`));\n  let pokeCords = pokeData.val().location;\n  let vertOverlap = Math.min(boxPos[1] + boxHeight, pokeCords[3]) - Math.max(boxPos[1], pokeCords[2]);\n  let horizOverlap = Math.min(boxPos[0] + boxWidth, pokeCords[1]) - Math.max(boxPos[0], pokeCords[0]);\n  if (vertOverlap < 0 || horizOverlap < 0) return false;\n  if (vertOverlap * horizOverlap >= ((boxHeight * boxWidth) / 6)) return true;\n  else return false;\n}\n\n\nexport { selectMons, getPokePics, updateScores, getScores, checkFound }","export default __webpack_public_path__ + \"static/media/check.49a98558.png\";","import React from 'react';\nimport Check from '../assets/check.png';\n\nfunction pokeCard(props) {\n    const { pokePic, pokeName, found } = props;\n    let check = null;\n    if (found) check = <img src={Check} alt='check' className='found-check'></img>;\n    return (\n        <div className='poke-card'>\n            {check}\n            <img src={pokePic} alt={pokeName} className='poke-pic'></img>\n            <h3 className='poke-name'>{pokeName}</h3>\n        </div>\n    );\n}\n\nexport default pokeCard;\n","import React from 'react';\n\nfunction PokeView(props) {\n    const { boxCords, pokeList, foundPokes, foundFunction } = props;\n    return (\n        <div className='view-box'\n            style={{ \n                top: `${boxCords[1]}px`,\n                left: `${boxCords[0]}px`\n                }}>\n            <div className='view-square'></div>\n            <div className='select-box'>\n                {pokeList.map((mon, index) => {\n                    if (foundPokes[index].found) return null;\n                    else return <button \n                        className='select-button' \n                        onClick={() => foundFunction(mon.id, boxCords)}\n                        key={index}>\n                            {mon.name}\n                        </button>\n            })\n            }\n            </div>\n        </div>\n    );\n}\nexport default PokeView;\n","export default function msToTime(s) {\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    return (twoDigit(mins) + ':' + twoDigit(secs) + '.' + ms);\n}\n\nfunction twoDigit (time) {\n    if ((time / 10) === 0) return ('0' + time);\n    else return ('' + time);\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport pokePic from './assets/pokemon_wallpaper.jpeg';\nimport { selectMons, getPokePics, checkFound } from './firebase';\nimport PokeCard from './components/PokeCard';\nimport PokeView from './components/PokeView';\nimport msToTime from './displayTime';\n\nfunction Game() {\n    let [foundPokes, setFoundPokes] = useState([]);\n    let [pickedPokemon, setPickedPokemon] = useState([]);\n    let [pokePics, setPokePics]  = useState([]);\n    let [pokeCards, setPokeCards] = useState(null);\n    let [boxView, setBoxView] = useState(null);\n    const startTime = useRef(Date.now());\n    const history = useHistory();\n    const name = history.location.state.name;\n\n    useEffect(() => {\n        const getData = async () => {\n            const mons = await selectMons();\n            const pics = await getPokePics(mons);\n            const foundArray = [    \n                {\n                    id: mons[0].id,\n                    found: false\n                },\n                {\n                    id: mons[1].id,\n                    found: false\n                },\n                {\n                    id: mons[2].id,\n                    found: false \n                },\n                {\n                    id: mons[3].id,\n                    found: false  \n                },\n                {\n                    id: mons[4].id,\n                    found: false\n                }\n            ];\n            setPickedPokemon(mons);\n            setFoundPokes(foundArray);\n            setPokePics(pics);\n            setPokeCards(pics.map((mon, index) => \n                <PokeCard\n                    pokePic={mon.src}\n                    pokeName={mons[index].name}\n                    found={foundArray[index].found}\n                    key={index}\n                ></PokeCard>));\n        }\n        getData();\n    }, [])\n    \n    const selectArea = (e) => {\n        const boxWidth = 90;\n        const boxHeight = 110;\n        const parentPos = getPosition(e.target);\n        const xPos = e.clientX - parentPos.x - boxWidth / 2;\n        const yPos = e.clientY - parentPos.y - boxHeight / 2;\n        setBoxView(\n            <PokeView \n                boxCords={[xPos, yPos]}\n                pokeList={pickedPokemon}\n                foundPokes={foundPokes}\n                foundFunction={updateFound}>\n            </PokeView>\n        );\n    }\n\n    const updateFound = (pokeID, boxCords) => {\n        const found = checkFound(pokeID, boxCords);\n        const index = foundPokes.map((poke) => poke.id).indexOf(pokeID);\n        found.then(result => {\n            setBoxView(null);\n            setFoundPokes(foundPokes.slice(0, index)\n            .concat([{id: pickedPokemon[index].id, found: result}])\n            .concat(foundPokes.slice(index + 1)));\n        })\n    }\n\n    useEffect(() => {\n        const totalFound = foundPokes.reduce((prev, cur) => prev + cur.found, 0);\n        if (totalFound === 5) {\n            history.push({\n                pathname: '/end',\n                state: {\n                    time: Date.now() - startTime.current,\n                    name: name\n                }\n            });\n        }\n    })\n    \n    useEffect(() => {\n        setPokeCards(pokePics.map((mon, index) => \n                <PokeCard\n                    pokePic={mon.src}\n                    pokeName={pickedPokemon[index].name}\n                    found={foundPokes[index].found}\n                    key={index}\n                ></PokeCard>))\n    }, [foundPokes, pickedPokemon, pokePics])\n\n    return (\n        <div>\n            <h2>Pokemon to find:</h2>\n            <div className='poke-box'>\n                {pokeCards}\n            </div>\n            <div className='game-box' onClick={selectArea}>\n                {boxView}\n                <img \n                    src={pokePic} \n                    alt='pokemon-game' \n                    className='big-poke-pic'>\n                </img>\n            </div>\n        </div>\n    );\n}\n\n//borrowed from https://www.kirupa.com/snippets/move_element_to_click_position.htm\nfunction getPosition(element) {\n    let xPos = 0;\n    let yPos = 0;\n\n    while (element) {\n        if (element.tagName === 'BODY') {\n            let xScroll = element.scrollLeft || document.documentElement.scrollLeft;\n            let yScroll = element.scrollTop || document.documentElement.scrollTop;\n\n            xPos += (element.offsetLeft - xScroll + element.clientLeft);\n            yPos += (element.offsetTop - yScroll + element.clientTop);\n        } else {\n            xPos += (element.offsetLeft - element.scrollLeft + element.clientLeft);\n            yPos += (element.offsetTop - element.scrollTop + element.clientTop);\n        }\n        element = element.offsetParent;\n    }\n    return {\n        x: xPos,\n        y: yPos\n    };\n}\n\nexport default Game;\n","import React from 'react';\n\nfunction ScoreCard(props) {\n    const { pName, pScore } = props;\n    return (\n        <div className='score-card'>\n            <h5 className='score-name'>{pName}</h5>\n            <h5 className='score-time'>{pScore}</h5>\n        </div>\n    )\n}\n\nexport default ScoreCard;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { getScores, updateScores } from './firebase';\nimport ScoreCard from './components/ScoreCard'; \nimport _ from 'lodash';\nimport msToTime from './displayTime';\n\nfunction End() {\n\n    const history = useHistory();\n    let [curScores, setCurScores] = useState([])\n    let [timeDisplay, setTimeDisplay] = useState('');\n    let [highScoreMessage, setHighScoreMessage] = useState(null);\n  \n    useEffect(() => {\n        const getData = async () => {\n            const elapsedTime = history.location.state.time;\n            const playerName = history.location.state.name;\n            const displayTime = msToTime(elapsedTime)\n            const playerScore = { displayTime: displayTime, name: playerName, rawTime: elapsedTime }\n            const prev = await getScores();\n            const cur = updateScores(playerScore, prev);\n            const message = (_.isEqual(prev, cur)) ? null :\n            <h3>Congratulations! Your time was quick enough to make the high score board!</h3>\n            setCurScores(cur);\n            setTimeDisplay(displayTime);\n            setHighScoreMessage(message);\n        }\n        getData();\n    }, []);\n\n   \n    return (\n        <div>\n            <h2>You found all the Pokemon in \n                {' ' + timeDisplay.slice(0, timeDisplay.indexOf(':')) + ' '} \n                minutes and \n                {' ' + timeDisplay.slice(timeDisplay.indexOf(':') + 1)} seconds!</h2>\n            {highScoreMessage}\n            <h3 className='score-intro'>High Scores: </h3>\n            <div className='score-table'>\n            {curScores.map((scoreCard, index) => \n                <ScoreCard \n                    pName={scoreCard.name} \n                    pScore={scoreCard.displayTime}>\n                    key={index}\n                    </ScoreCard>)}\n            </div>\n            \n            <Link to={{\n                pathname: '/'\n                }}\n                className='again-link'>Click to play again</Link>\n        </div>\n    )\n}\n\n\n\nexport default End;\n","import { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Start from './Start';\nimport Game from './Game';\nimport End from './End';\n\nconst Routes = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path='/' component={Start} />\n                <Route path='/game' component={Game} />\n                <Route path='/end' component={End} />\n            </Switch>\n        </BrowserRouter>\n    );\n};\n\nexport default Routes;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport Routes from './Routes';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}