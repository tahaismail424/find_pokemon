{"ast":null,"code":"var _jsxFileName = \"/Users/tahaismail/web_projects/find_pokemon/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport pokePic from './assets/pokemon_wallpaper.jpeg';\nimport { selectMons, getPokePics, checkFound } from './firebase';\nimport PokeCard from './components/PokeCard';\nimport PokeView from './components/PokeView';\nimport PokeSelect from './components/PokeSelect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  let [foundPokes, setFoundPokes] = useState([]);\n  let [currentBoxCords, setCurrentBoxCords] = useState(null);\n  let [pickedPokemon, setPickedPokemon] = useState([]);\n  let [pokePics, setPokePics] = useState();\n  const pokeCards = useRef(null);\n  let foundArray = [{\n    id: results[0].id,\n    found: false\n  }, {\n    id: results[1].id,\n    found: false\n  }, {\n    id: results[2].id,\n    found: false\n  }, {\n    id: results[3].id,\n    found: false\n  }, {\n    id: results[4].id,\n    found: false\n  }];\n  useEffect(() => {\n    async () => {\n      const mons = await setPickedPokemon;\n      setPickedPokemon(selectMons());\n    };\n\n    setPickedPokemon();\n  }); // useEffect( async() => { \n  //     setPickedPokemon(Promise.all(selectMons()).then((mons) => {\n  //         let results = [];\n  //         for (let mon of mons) {\n  //             results.push({\n  //                 id: mon.val().id,\n  //                 name: mon.val().name\n  //             });\n  //         }\n  //         setFoundPokes(foundArray);\n  //         setPokePics(\n  //             Promise.all(getPokePics(results)).then((monURLs) => {\n  //             let monPics = [];\n  //             for (let url in monURLs) {\n  //                 monPics.push({\n  //                     id: results[url].id,\n  //                     src: monURLs[url]\n  //                 });\n  //             }\n  //             pokeCards.current = monPics.map((mon, index) => \n  //                 <PokeCard\n  //                     pokePic={mon.src}\n  //                     pokeName={results[index].name}\n  //                     found={foundArray[index].found}\n  //                     ></PokeCard>)\n  //             return monPics;\n  //         })\n  //         .catch((error) => {\n  //             console.error(error);\n  //         })\n  //         );\n  //         return results;\n  //         }).catch((error) => {console.log(error)})\n  //     )\n  // }, []);\n\n  const history = useHistory();\n  const startTime = Date.now();\n  const name = history.location.state.name;\n\n  const selectArea = e => {\n    const xClick = e.clientX;\n    const yClick = e.clientY;\n    const boxCords = [xClick - 45, xClick + 45, yClick - 55, yClick + 55];\n    setCurrentBoxCords([boxCords[0], boxCords[2]]);\n  };\n\n  const updateFound = pokeID => {\n    const found = checkFound(pokeID);\n    const index = foundPokes.map(poke => poke.id).indexOf(pokeID);\n    setFoundPokes(foundPokes.slice(0, index).concat({\n      id: pickedPokemon[index].id,\n      found: found\n    }).concat(foundPokes.slice(index + 1)));\n    setCurrentBoxCords(null);\n  };\n\n  useEffect(() => {\n    const totalFound = foundPokes.reduce((prev, cur) => prev + cur.found, 0);\n\n    if (totalFound === 5) {\n      const elapsedTime = Date.now() - startTime;\n      history.push({\n        pathname: '/end',\n        state: {\n          time: elapsedTime,\n          name: name\n        }\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pok\\xE9mon to find:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pokeBox\",\n      children: pokeCards.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: pokePic,\n      alt: \"pokemon-game\",\n      onClick: selectArea\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), currentBoxCords ? /*#__PURE__*/_jsxDEV(PokeView, {\n      boxCords: currentBoxCords,\n      children: /*#__PURE__*/_jsxDEV(PokeSelect, {\n        pokeList: pickedPokemon,\n        foundPokes: foundPokes,\n        foundFunction: updateFound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"fGsqYXZxFlRem4fY3rhUGoBwlmc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/tahaismail/web_projects/find_pokemon/src/Game.js"],"names":["React","useState","useEffect","useRef","useHistory","pokePic","selectMons","getPokePics","checkFound","PokeCard","PokeView","PokeSelect","Game","foundPokes","setFoundPokes","currentBoxCords","setCurrentBoxCords","pickedPokemon","setPickedPokemon","pokePics","setPokePics","pokeCards","foundArray","id","results","found","mons","history","startTime","Date","now","name","location","state","selectArea","e","xClick","clientX","yClick","clientY","boxCords","updateFound","pokeID","index","map","poke","indexOf","slice","concat","totalFound","reduce","prev","cur","elapsedTime","push","pathname","time","current"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport pokePic from './assets/pokemon_wallpaper.jpeg';\nimport { selectMons, getPokePics, checkFound } from './firebase';\nimport PokeCard from './components/PokeCard';\nimport PokeView from './components/PokeView';\nimport PokeSelect from './components/PokeSelect';\n\nfunction Game() {\n    let [foundPokes, setFoundPokes] = useState([]);\n    let [currentBoxCords, setCurrentBoxCords] = useState(null);\n    let [pickedPokemon, setPickedPokemon] = useState([]);\n    let [pokePics, setPokePics] = useState();\n    const pokeCards = useRef(null);\n\n    let foundArray = [    \n        {\n            id: results[0].id,\n            found: false\n        },\n        {\n            id: results[1].id,\n            found: false\n        },\n        {\n            id: results[2].id,\n            found: false \n        },\n        {\n            id: results[3].id,\n            found: false  \n        },\n        {\n            id: results[4].id,\n            found: false\n        }\n    ];\n\n    useEffect(() => {\n        async () => {\n            const mons = await setPickedPokemon;\n            setPickedPokemon(selectMons());\n        }\n        setPickedPokemon()\n    })\n\n\n\n    // useEffect( async() => { \n    //     setPickedPokemon(Promise.all(selectMons()).then((mons) => {\n    //         let results = [];\n    //         for (let mon of mons) {\n    //             results.push({\n    //                 id: mon.val().id,\n    //                 name: mon.val().name\n    //             });\n    //         }\n\n            \n    \n    //         setFoundPokes(foundArray);\n\n    //         setPokePics(\n    //             Promise.all(getPokePics(results)).then((monURLs) => {\n    //             let monPics = [];\n    //             for (let url in monURLs) {\n    //                 monPics.push({\n    //                     id: results[url].id,\n    //                     src: monURLs[url]\n    //                 });\n    //             }\n    //             pokeCards.current = monPics.map((mon, index) => \n    //                 <PokeCard\n    //                     pokePic={mon.src}\n    //                     pokeName={results[index].name}\n    //                     found={foundArray[index].found}\n    //                     ></PokeCard>)\n    //             return monPics;\n    //         })\n    //         .catch((error) => {\n    //             console.error(error);\n    //         })\n    //         );\n    //         return results;\n    //         }).catch((error) => {console.log(error)})\n    //     )\n    // }, []);\n    \n    \n    const history = useHistory();\n    const startTime = Date.now();\n    const name = history.location.state.name;\n    \n    const selectArea = (e) => {\n        const xClick = e.clientX;\n        const yClick = e.clientY;\n        const boxCords = [xClick - 45, xClick + 45, yClick - 55, yClick + 55];\n        setCurrentBoxCords([boxCords[0], boxCords[2]]);\n    }\n\n    const updateFound = (pokeID) => {\n        const found = checkFound(pokeID);\n        const index = foundPokes.map((poke) => poke.id).indexOf(pokeID);\n        setFoundPokes(foundPokes.slice(0, index).concat({id: pickedPokemon[index].id, found: found}).concat(foundPokes.slice(index + 1)));\n        setCurrentBoxCords(null);\n    }\n\n    useEffect(() => {\n        const totalFound = foundPokes.reduce((prev, cur) => prev + cur.found, 0);\n        if (totalFound === 5) {\n            const elapsedTime = Date.now() - startTime;\n            history.push({\n                pathname: '/end',\n                state: {\n                    time: elapsedTime,\n                    name: name\n                }\n            });\n        }\n    })\n\n    return (\n        <div>\n            <h2>Pokémon to find:</h2>\n            <div className='pokeBox'>\n                {pokeCards.current}\n            </div>\n            <img src={pokePic} alt='pokemon-game' onClick={selectArea}></img>\n            {currentBoxCords ? \n                <PokeView boxCords={currentBoxCords}>\n                    <PokeSelect \n                        pokeList={pickedPokemon} \n                        foundPokes={foundPokes} \n                        foundFunction={updateFound}>\n                    </PokeSelect>\n                </PokeView> \n                : null}\n        </div>\n    );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}