{"ast":null,"code":"var _jsxFileName = \"/Users/tahaismail/web_projects/find_pokemon/src/End.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { getScores, updateScores } from './firebase';\nimport ScoreCard from './components/ScoreCard';\nimport _ from 'lodash';\nimport msToTime from './displayTime';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction End() {\n  _s();\n\n  const history = useHistory();\n  let [prevScores, setPrevScores] = useState([]);\n  let [curScores, setCurScores] = useState([]);\n  let [timeDisplay, setTimeDisplay] = useState('');\n  let [highScoreMessage, setHighScoreMessage] = useState(null);\n  useEffect(() => {\n    const getData = async () => {\n      const elapsedTime = history.location.state.time;\n      const playerName = history.location.state.name;\n      const displayTime = msToTime(elapsedTime);\n      const playerScore = {\n        name: playerName,\n        time: displayTime\n      };\n      const prev = await getScores();\n      const cur = updateScores(playerScore, prevScores);\n      const message = _.isEqual(prevScores, curScores) ? null : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Congratulations! Your time was quick enough to make the high score board!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this);\n      setPrevScores(prev);\n      setCurScores(cur);\n      setTimeDisplay(displayTime);\n      setHighScoreMessage(message);\n    };\n\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"You found all the Pokemon in \", timeDisplay.slice(0, timeDisplay.indexOf(':')), \" minutes and \", timeDisplay.slice(2), \" seconds!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), highScoreMessage, /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"High Scores: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), curScores.map(scoreCard => /*#__PURE__*/_jsxDEV(ScoreCard, {\n      pName: scoreCard.name,\n      pScore: scoreCard.score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 41\n    }, this)), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: '/'\n      },\n      className: \"again-link\",\n      children: \"Click to play again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(End, \"4Ur5CfwQh0k5K2pqsVLnKbrTXpI=\", false, function () {\n  return [useHistory];\n});\n\n_c = End;\nexport default End;\n\nvar _c;\n\n$RefreshReg$(_c, \"End\");","map":{"version":3,"sources":["/Users/tahaismail/web_projects/find_pokemon/src/End.js"],"names":["React","useEffect","useState","useHistory","Link","getScores","updateScores","ScoreCard","_","msToTime","End","history","prevScores","setPrevScores","curScores","setCurScores","timeDisplay","setTimeDisplay","highScoreMessage","setHighScoreMessage","getData","elapsedTime","location","state","time","playerName","name","displayTime","playerScore","prev","cur","message","isEqual","slice","indexOf","map","scoreCard","score","pathname"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,YAAxC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP,MAAqB,eAArB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEX,QAAMC,OAAO,GAAGR,UAAU,EAA1B;AACA,MAAI,CAACS,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA1C;AACA,MAAI,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAI,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAI,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CjB,QAAQ,CAAC,IAAD,CAAtD;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMmB,OAAO,GAAG,YAAY;AACxB,YAAMC,WAAW,GAAGV,OAAO,CAACW,QAAR,CAAiBC,KAAjB,CAAuBC,IAA3C;AACA,YAAMC,UAAU,GAAGd,OAAO,CAACW,QAAR,CAAiBC,KAAjB,CAAuBG,IAA1C;AACA,YAAMC,WAAW,GAAGlB,QAAQ,CAACY,WAAD,CAA5B;AACA,YAAMO,WAAW,GAAG;AAAEF,QAAAA,IAAI,EAAED,UAAR;AAAoBD,QAAAA,IAAI,EAAEG;AAA1B,OAApB;AACA,YAAME,IAAI,GAAG,MAAMxB,SAAS,EAA5B;AACA,YAAMyB,GAAG,GAAGxB,YAAY,CAACsB,WAAD,EAAchB,UAAd,CAAxB;AACA,YAAMmB,OAAO,GAAIvB,CAAC,CAACwB,OAAF,CAAUpB,UAAV,EAAsBE,SAAtB,CAAD,GAAqC,IAArC,gBAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAEAD,MAAAA,aAAa,CAACgB,IAAD,CAAb;AACAd,MAAAA,YAAY,CAACe,GAAD,CAAZ;AACAb,MAAAA,cAAc,CAACU,WAAD,CAAd;AACAR,MAAAA,mBAAmB,CAACY,OAAD,CAAnB;AACH,KAbD;;AAcAX,IAAAA,OAAO;AACV,GAhBQ,EAgBN,EAhBM,CAAT;AAmBA,sBACI;AAAA,4BACI;AAAA,kDAAkCJ,WAAW,CAACiB,KAAZ,CAAkB,CAAlB,EAAqBjB,WAAW,CAACkB,OAAZ,CAAoB,GAApB,CAArB,CAAlC,mBAA+FlB,WAAW,CAACiB,KAAZ,CAAkB,CAAlB,CAA/F;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKf,gBAFL,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKJ,SAAS,CAACqB,GAAV,CAAcC,SAAS,iBAAI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,SAAS,CAACV,IAA5B;AAAkC,MAAA,MAAM,EAAEU,SAAS,CAACC;AAApD;AAAA;AAAA;AAAA;AAAA,YAA3B,CAJL,eAKI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ,OAAV;AAGI,MAAA,SAAS,EAAC,YAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAxCQ5B,G;UAEWP,U;;;KAFXO,G;AA4CT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { getScores, updateScores } from './firebase';\nimport ScoreCard from './components/ScoreCard'; \nimport _ from 'lodash';\nimport msToTime from './displayTime';\n\nfunction End() {\n\n    const history = useHistory();\n    let [prevScores, setPrevScores] = useState([]);\n    let [curScores, setCurScores] = useState([])\n    let [timeDisplay, setTimeDisplay] = useState('');\n    let [highScoreMessage, setHighScoreMessage] = useState(null);\n  \n   \n    useEffect(() => {\n        const getData = async () => {\n            const elapsedTime = history.location.state.time;\n            const playerName = history.location.state.name;\n            const displayTime = msToTime(elapsedTime)\n            const playerScore = { name: playerName, time: displayTime }\n            const prev = await getScores();\n            const cur = updateScores(playerScore, prevScores);\n            const message = (_.isEqual(prevScores, curScores)) ? null :\n            <h3>Congratulations! Your time was quick enough to make the high score board!</h3>\n            setPrevScores(prev);\n            setCurScores(cur);\n            setTimeDisplay(displayTime);\n            setHighScoreMessage(message);\n        }\n        getData();\n    }, []);\n\n   \n    return (\n        <div>\n            <h2>You found all the Pokemon in {timeDisplay.slice(0, timeDisplay.indexOf(':'))} minutes and {timeDisplay.slice(2)} seconds!</h2>\n            {highScoreMessage}\n            <h3>High Scores: </h3>\n            {curScores.map(scoreCard => <ScoreCard pName={scoreCard.name} pScore={scoreCard.score}></ScoreCard>)}\n            <Link to={{\n                pathname: '/'\n                }}\n                className='again-link'>Click to play again</Link>\n        </div>\n    )\n}\n\n\n\nexport default End;\n"]},"metadata":{},"sourceType":"module"}