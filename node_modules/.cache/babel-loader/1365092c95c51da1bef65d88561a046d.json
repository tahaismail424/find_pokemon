{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tahaismail/web_projects/find_pokemon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/Users/tahaismail/web_projects/find_pokemon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"/Users/tahaismail/web_projects/find_pokemon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{initializeApp}from'firebase/app';import{getDatabase,set,ref as dataRef,get}from'firebase/database';import{getDownloadURL,ref as storageRef,getStorage}from'firebase/storage';import _ from'lodash';var config={apiKey:\"AIzaSyDSDL34m1WEKMonuecyPZqmwhn36yoYgr0\",authDomain:\"find-pokemon-67226.firebaseapp.com\",databaseURL:\"https://find-pokemon-67226-default-rtdb.firebaseio.com\",projectId:\"find-pokemon-67226\",storageBucket:\"find-pokemon-67226.appspot.com\",messagingSenderId:\"532150975651\",appId:\"1:532150975651:web:d7b7bb9c00a0e1181bd316\",measurementId:\"G-TWGH46RDE4\"};var firebaseApp=initializeApp(config);var storage=getStorage(firebaseApp);var database=getDatabase(firebaseApp);var gsRef=storageRef(storage,'gs://find-pokemon-67226.appspot.com');//249 pokemon, from ID 0-248\nfunction selectMons(){return _selectMons.apply(this,arguments);}function _selectMons(){_selectMons=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var monIDs,monCalls,i,pokeData,pickedPokes,_iterator,_step,mon;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:monIDs=[];monCalls=[];for(i=0;i<5;i++){monIDs.push(Math.floor(Math.random()*249));monCalls.push(get(dataRef(database,\"pokemon/\".concat(monIDs[i]))));}_context.next=5;return Promise.all(monCalls);case 5:pokeData=_context.sent;pickedPokes=[];_iterator=_createForOfIteratorHelper(pokeData);try{for(_iterator.s();!(_step=_iterator.n()).done;){mon=_step.value;pickedPokes.push({id:mon.val().id,name:mon.val().name});}}catch(err){_iterator.e(err);}finally{_iterator.f();}return _context.abrupt(\"return\",pickedPokes);case 10:case\"end\":return _context.stop();}}},_callee);}));return _selectMons.apply(this,arguments);}function getPokePics(_x){return _getPokePics.apply(this,arguments);}function _getPokePics(){_getPokePics=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pokeList){var monCalls,_iterator2,_step2,pokemon,monURLs,pokePics,url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:monCalls=[];_iterator2=_createForOfIteratorHelper(pokeList);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){pokemon=_step2.value;monCalls.push(getDownloadURL(storageRef(gsRef,pokemon.name+'.png')));}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}_context2.next=5;return Promise.all(monCalls);case 5:monURLs=_context2.sent;pokePics=[];for(url in monURLs){pokePics.push({id:pokeList[url].id,src:monURLs[url]});}return _context2.abrupt(\"return\",pokePics);case 9:case\"end\":return _context2.stop();}}},_callee2);}));return _getPokePics.apply(this,arguments);}function updateScores(latestScore,scoreList){for(var score in scoreList){if(_.isEqual(scoreList[score],latestScore))break;if(scoreList[score].rawTime>latestScore.rawTime){scoreList.splice(score,1,latestScore,scoreList[score]);scoreList.pop();break;}}set(dataRef(database,'high scores'),scoreList);return scoreList;}function getScores(){return _getScores.apply(this,arguments);}//check on this function\nfunction _getScores(){_getScores=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var scoreData,scoreList;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return get(dataRef(database,'high scores'));case 2:scoreData=_context3.sent;scoreList=scoreData.val();return _context3.abrupt(\"return\",scoreList);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return _getScores.apply(this,arguments);}function checkFound(_x2,_x3){return _checkFound.apply(this,arguments);}function _checkFound(){_checkFound=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(pokeID,boxPos){var boxHeight,boxWidth,pokeData,pokeCords,vertOverlap,horizOverlap;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:boxHeight=110;boxWidth=90;_context4.next=4;return get(dataRef(database,\"pokemon/\".concat(pokeID)));case 4:pokeData=_context4.sent;pokeCords=pokeData.val().location;vertOverlap=Math.min(boxPos[1]+boxHeight,pokeCords[3])-Math.max(boxPos[1],pokeCords[2]);horizOverlap=Math.min(boxPos[0]+boxWidth,pokeCords[1])-Math.max(boxPos[0],pokeCords[0]);if(!(vertOverlap<0||horizOverlap<0)){_context4.next=10;break;}return _context4.abrupt(\"return\",false);case 10:if(!(vertOverlap*horizOverlap>=boxHeight*boxWidth/6)){_context4.next=14;break;}return _context4.abrupt(\"return\",true);case 14:return _context4.abrupt(\"return\",false);case 15:case\"end\":return _context4.stop();}}},_callee4);}));return _checkFound.apply(this,arguments);}export{selectMons,getPokePics,updateScores,getScores,checkFound};","map":{"version":3,"sources":["/Users/tahaismail/web_projects/find_pokemon/src/firebase.js"],"names":["initializeApp","getDatabase","set","ref","dataRef","get","getDownloadURL","storageRef","getStorage","_","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","storage","database","gsRef","selectMons","monIDs","monCalls","i","push","Math","floor","random","Promise","all","pokeData","pickedPokes","mon","id","val","name","getPokePics","pokeList","pokemon","monURLs","pokePics","url","src","updateScores","latestScore","scoreList","score","isEqual","rawTime","splice","pop","getScores","scoreData","checkFound","pokeID","boxPos","boxHeight","boxWidth","pokeCords","location","vertOverlap","min","max","horizOverlap"],"mappings":"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","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getDatabase, set, ref as dataRef, get } from 'firebase/database';\nimport { getDownloadURL, ref as storageRef, getStorage } from 'firebase/storage';\nimport _ from 'lodash';\n\nconst config = {\n  apiKey: \"AIzaSyDSDL34m1WEKMonuecyPZqmwhn36yoYgr0\",\n  authDomain: \"find-pokemon-67226.firebaseapp.com\",\n  databaseURL: \"https://find-pokemon-67226-default-rtdb.firebaseio.com\",\n  projectId: \"find-pokemon-67226\",\n  storageBucket: \"find-pokemon-67226.appspot.com\",\n  messagingSenderId: \"532150975651\",\n  appId: \"1:532150975651:web:d7b7bb9c00a0e1181bd316\",\n  measurementId: \"G-TWGH46RDE4\"\n  };\n\nconst firebaseApp = initializeApp(config);\nconst storage = getStorage(firebaseApp);\nconst database = getDatabase(firebaseApp);\n\nconst gsRef = storageRef(storage, 'gs://find-pokemon-67226.appspot.com');\n\n\n//249 pokemon, from ID 0-248\nasync function selectMons() {\n    let monIDs = [];\n    let monCalls = [];\n    for (let i = 0; i < 5; i++) {\n      monIDs.push(Math.floor(Math.random() * 249));\n      monCalls.push(get(dataRef(database, `pokemon/${monIDs[i]}`)));\n    }\n    let pokeData = await Promise.all(monCalls);\n    let pickedPokes = [];\n    for (let mon of pokeData) {\n      pickedPokes.push({id: mon.val().id, name: mon.val().name})\n    }\n    return pickedPokes;\n}\n\nasync function getPokePics(pokeList) {\n  let monCalls = [];\n  for (let pokemon of pokeList) {\n    monCalls.push(getDownloadURL(storageRef(gsRef, pokemon.name + '.png')))\n  }\n\n  let monURLs = await Promise.all(monCalls);\n  let pokePics = [];\n  for (let url in monURLs) {\n    pokePics.push({id: pokeList[url].id, src: monURLs[url]})\n  }\n  return pokePics;\n  }\n\n\nfunction updateScores (latestScore, scoreList) {\n\n  for (let score in scoreList) {\n    if (_.isEqual(scoreList[score], latestScore)) break;\n    if (scoreList[score].rawTime > latestScore.rawTime) {\n      scoreList.splice(score, 1, latestScore, scoreList[score]);\n      scoreList.pop();\n      break;\n    }\n  }\n\n  set(dataRef(database, 'high scores'), scoreList);\n  return scoreList;\n}\n\nasync function getScores() {\n  let scoreData = await (get(dataRef(database, 'high scores')));\n  let scoreList = scoreData.val();\n  return scoreList;\n}\n\n//check on this function\nasync function checkFound(pokeID, boxPos) {\n  const boxHeight = 110;\n  const boxWidth = 90;\n  let pokeData = await get(dataRef(database,`pokemon/${pokeID}`));\n  let pokeCords = pokeData.val().location;\n  let vertOverlap = Math.min(boxPos[1] + boxHeight, pokeCords[3]) - Math.max(boxPos[1], pokeCords[2]);\n  let horizOverlap = Math.min(boxPos[0] + boxWidth, pokeCords[1]) - Math.max(boxPos[0], pokeCords[0]);\n  if (vertOverlap < 0 || horizOverlap < 0) return false;\n  if (vertOverlap * horizOverlap >= ((boxHeight * boxWidth) / 6)) return true;\n  else return false;\n}\n\n\nexport { selectMons, getPokePics, updateScores, getScores, checkFound }"]},"metadata":{},"sourceType":"module"}