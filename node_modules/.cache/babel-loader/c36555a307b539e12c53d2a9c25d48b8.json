{"ast":null,"code":"var _jsxFileName = \"/Users/tahaismail/web_projects/find_pokemon/src/End.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { getScores, updateScores } from './firebase';\nimport ScoreCard from './components/ScoreCard';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction End() {\n  _s();\n\n  const history = useHistory();\n  let [prevScores, setPrevScores] = useState([]);\n  let [curScores, setCurScores] = useState([]);\n  let [timeDisplay, setTimeDisplay] = useState('');\n  useEffect(() => {\n    const getData = async () => {\n      const elapsedTime = history.location.state.time;\n      const playerName = history.location.state.name;\n      const displayTime = msToTime(elapsedTime);\n      const playerScore = {\n        name: playerName,\n        time: timeDisplay\n      };\n      const prev = await getScores();\n      const cur = updateScores(playerScore, prevScores);\n      setPrevScores(prev);\n      setCurScores(cur);\n      setTimeDisplay();\n    };\n\n    getData();\n  }, []);\n  const highScoreMessage = _.isEqual(prevScores, curScores) ? null : /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Congratulations! Your time was quick enough to make the high score board!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"You found all the Pok\\xE9mon in \", timeDisplay.slice(0, 2), \" minutes and \", timeDisplay.slice(3), \" seconds!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), highScoreMessage, /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"High Scores: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), curScores.map(scoreCard => /*#__PURE__*/_jsxDEV(ScoreCard, {\n      pName: scoreCard.name,\n      pScore: scoreCard.score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 41\n    }, this)), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: '/'\n      },\n      children: \"Click to play again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(End, \"/J1Qw0RYsOwR/WDMksUOogk2eos=\", false, function () {\n  return [useHistory];\n});\n\n_c = End;\n\nfunction msToTime(s) {\n  const ms = s % 1000;\n  s = (s - ms) / 1000;\n  const secs = s % 60;\n  s = (s - secs) / 60;\n  const mins = s % 60;\n  return mins + ':' + secs + '.' + ms;\n}\n\nexport default End;\n\nvar _c;\n\n$RefreshReg$(_c, \"End\");","map":{"version":3,"sources":["/Users/tahaismail/web_projects/find_pokemon/src/End.js"],"names":["React","useEffect","useState","useHistory","Link","getScores","updateScores","ScoreCard","_","End","history","prevScores","setPrevScores","curScores","setCurScores","timeDisplay","setTimeDisplay","getData","elapsedTime","location","state","time","playerName","name","displayTime","msToTime","playerScore","prev","cur","highScoreMessage","isEqual","slice","map","scoreCard","score","pathname","s","ms","secs","mins"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,YAAxC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEX,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AACA,MAAI,CAACQ,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA1C;AACA,MAAI,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAI,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA5C;AAIAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMgB,OAAO,GAAG,YAAY;AACxB,YAAMC,WAAW,GAAGR,OAAO,CAACS,QAAR,CAAiBC,KAAjB,CAAuBC,IAA3C;AACA,YAAMC,UAAU,GAAGZ,OAAO,CAACS,QAAR,CAAiBC,KAAjB,CAAuBG,IAA1C;AACA,YAAMC,WAAW,GAAGC,QAAQ,CAACP,WAAD,CAA5B;AACA,YAAMQ,WAAW,GAAG;AAAEH,QAAAA,IAAI,EAAED,UAAR;AAAoBD,QAAAA,IAAI,EAAEN;AAA1B,OAApB;AACA,YAAMY,IAAI,GAAG,MAAMtB,SAAS,EAA5B;AACA,YAAMuB,GAAG,GAAGtB,YAAY,CAACoB,WAAD,EAAcf,UAAd,CAAxB;AACAC,MAAAA,aAAa,CAACe,IAAD,CAAb;AACAb,MAAAA,YAAY,CAACc,GAAD,CAAZ;AACAZ,MAAAA,cAAc;AACjB,KAVD;;AAWAC,IAAAA,OAAO;AACV,GAbQ,EAaN,EAbM,CAAT;AAeA,QAAMY,gBAAgB,GAAIrB,CAAC,CAACsB,OAAF,CAAUnB,UAAV,EAAsBE,SAAtB,CAAD,GAAqC,IAArC,gBACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAEA,sBACI;AAAA,4BACI;AAAA,qDAAkCE,WAAW,CAACgB,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAlC,mBAAwEhB,WAAW,CAACgB,KAAZ,CAAkB,CAAlB,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKF,gBAFL,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKhB,SAAS,CAACmB,GAAV,CAAcC,SAAS,iBAAI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,SAAS,CAACV,IAA5B;AAAkC,MAAA,MAAM,EAAEU,SAAS,CAACC;AAApD;AAAA;AAAA;AAAA;AAAA,YAA3B,CAJL,eAKI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GArCQ1B,G;UAEWN,U;;;KAFXM,G;;AAuCT,SAASgB,QAAT,CAAkBW,CAAlB,EAAqB;AACjB,QAAMC,EAAE,GAAGD,CAAC,GAAG,IAAf;AACAA,EAAAA,CAAC,GAAG,CAACA,CAAC,GAAGC,EAAL,IAAW,IAAf;AACA,QAAMC,IAAI,GAAGF,CAAC,GAAG,EAAjB;AACAA,EAAAA,CAAC,GAAG,CAACA,CAAC,GAAGE,IAAL,IAAa,EAAjB;AACA,QAAMC,IAAI,GAAGH,CAAC,GAAG,EAAjB;AACA,SAAQG,IAAI,GAAG,GAAP,GAAaD,IAAb,GAAoB,GAApB,GAA0BD,EAAlC;AACH;;AAED,eAAe5B,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { getScores, updateScores } from './firebase';\nimport ScoreCard from './components/ScoreCard'; \nimport _ from 'lodash';\n\nfunction End() {\n\n    const history = useHistory();\n    let [prevScores, setPrevScores] = useState([]);\n    let [curScores, setCurScores] = useState([])\n    let [timeDisplay, setTimeDisplay] = useState('');\n   \n  \n   \n    useEffect(() => {\n        const getData = async () => {\n            const elapsedTime = history.location.state.time;\n            const playerName = history.location.state.name;\n            const displayTime = msToTime(elapsedTime)\n            const playerScore = { name: playerName, time: timeDisplay }\n            const prev = await getScores();\n            const cur = updateScores(playerScore, prevScores);\n            setPrevScores(prev);\n            setCurScores(cur);\n            setTimeDisplay();\n        }\n        getData();\n    }, []);\n\n    const highScoreMessage = (_.isEqual(prevScores, curScores)) ? null :\n        <h3>Congratulations! Your time was quick enough to make the high score board!</h3>\n    return (\n        <div>\n            <h2>You found all the Pok√©mon in {timeDisplay.slice(0, 2)} minutes and {timeDisplay.slice(3)} seconds!</h2>\n            {highScoreMessage}\n            <h3>High Scores: </h3>\n            {curScores.map(scoreCard => <ScoreCard pName={scoreCard.name} pScore={scoreCard.score}></ScoreCard>)}\n            <Link to={{\n                pathname: '/'\n                }}>Click to play again</Link>\n        </div>\n    )\n}\n\nfunction msToTime(s) {\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    return (mins + ':' + secs + '.' + ms);\n}\n\nexport default End;\n"]},"metadata":{},"sourceType":"module"}