{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getDatabase, set, ref as dataRef, get, onValue } from 'firebase/database';\nimport { getDownloadURL, ref as storageRef, getStorage } from 'firebase/storage';\nconst config = {\n  apiKey: \"AIzaSyDSDL34m1WEKMonuecyPZqmwhn36yoYgr0\",\n  authDomain: \"find-pokemon-67226.firebaseapp.com\",\n  databaseURL: \"https://find-pokemon-67226-default-rtdb.firebaseio.com\",\n  projectId: \"find-pokemon-67226\",\n  storageBucket: \"find-pokemon-67226.appspot.com\",\n  messagingSenderId: \"532150975651\",\n  appId: \"1:532150975651:web:d7b7bb9c00a0e1181bd316\",\n  measurementId: \"G-TWGH46RDE4\"\n};\nconst firebaseApp = initializeApp(config);\nconst storage = getStorage(firebaseApp);\nconst database = getDatabase(firebaseApp);\nconst gsRef = storageRef(storage, 'gs://find-pokemon-67226.appspot.com');\nconst scoreRef = dataRef(database, 'high scores'); //249 pokemon, from ID 0-248\n\nasync function selectMons() {\n  let monIDs = [];\n  let monCalls = [];\n\n  for (let i = 0; i < 5; i++) {\n    monIDs.push(Math.floor(Math.random() * 249));\n    monCalls.push(get(dataRef(database, `pokemon/${monIDs[i]}`)));\n  }\n\n  let pokeData = await Promise.all(monCalls);\n  let pickedPokes = [];\n\n  for (let mon of pokeData) {\n    pickedPokes.push({\n      id: mon.val().id,\n      name: mon.val().name\n    });\n  }\n\n  return pickedPokes;\n}\n\nasync function getPokePics(pokeList) {\n  let monCalls = [];\n\n  for (let pokemon of pokeList) {\n    monCalls.push(getDownloadURL(storageRef(gsRef, pokemon.name + '.png')));\n  }\n\n  let monURLs = await Promise.all(monCalls);\n  let pokePics = [];\n\n  for (let url in monURLs) {\n    pokePics.push({\n      id: pokeList[url].id,\n      src: monURLs[url]\n    });\n  }\n\n  return pokePics;\n}\n\nfunction updateScores(latestScore, scoreList) {\n  for (let score in scoreList) {\n    if (scoreList[score].score < latestScore.score) scoreList.splice(score, 1, latestScore, scoreList[score]);\n  }\n\n  scoreList.pop();\n  set(scoreRef, scoreList);\n  return scoreList;\n}\n\nfunction getScores() {\n  let scoreList;\n  onValue(scoreRef, snapshot => {\n    scoreList = snapshot.val();\n  });\n  return scoreList;\n} //check on this function\n\n\nasync function checkFound(pokeID, boxPos) {\n  let pokeCords;\n  let pokeData = await get(dataRef(database, `pokemon/${pokeID}`));\n  get(dataRef(database, `pokemon/${pokeID}`)).then(snapshot => {\n    if (snapshot.exists()) {\n      pokeCords = snapshot.val().location;\n    }\n  }).catch(error => {\n    console.error(error);\n  });\n  let vertOverlap = Math.min(boxPos[1], pokeCords[1]) - Math.max(boxPos[0], pokeCords[0]);\n  let horizOverlap = Math.min(boxPos[3], pokeCords[3]) - Math.max(boxPos[2], pokeCords[2]);\n  let boxHeight = boxPos.top - boxPos.bottom;\n  let boxWidth = boxPos.right - boxPos.left;\n  if (vertOverlap * horizOverlap >= boxHeight * boxWidth / 2) return true;else return false;\n}\n\nexport { selectMons, getPokePics, updateScores, getScores, checkFound };","map":{"version":3,"sources":["/Users/tahaismail/web_projects/find_pokemon/src/firebase.js"],"names":["initializeApp","getDatabase","set","ref","dataRef","get","onValue","getDownloadURL","storageRef","getStorage","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","storage","database","gsRef","scoreRef","selectMons","monIDs","monCalls","i","push","Math","floor","random","pokeData","Promise","all","pickedPokes","mon","id","val","name","getPokePics","pokeList","pokemon","monURLs","pokePics","url","src","updateScores","latestScore","scoreList","score","splice","pop","getScores","snapshot","checkFound","pokeID","boxPos","pokeCords","then","exists","location","catch","error","console","vertOverlap","min","max","horizOverlap","boxHeight","top","bottom","boxWidth","right","left"],"mappings":"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","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getDatabase, set, ref as dataRef, get, onValue } from 'firebase/database';\nimport { getDownloadURL, ref as storageRef, getStorage } from 'firebase/storage';\n\nconst config = {\n  apiKey: \"AIzaSyDSDL34m1WEKMonuecyPZqmwhn36yoYgr0\",\n  authDomain: \"find-pokemon-67226.firebaseapp.com\",\n  databaseURL: \"https://find-pokemon-67226-default-rtdb.firebaseio.com\",\n  projectId: \"find-pokemon-67226\",\n  storageBucket: \"find-pokemon-67226.appspot.com\",\n  messagingSenderId: \"532150975651\",\n  appId: \"1:532150975651:web:d7b7bb9c00a0e1181bd316\",\n  measurementId: \"G-TWGH46RDE4\"\n  };\n\nconst firebaseApp = initializeApp(config);\nconst storage = getStorage(firebaseApp);\nconst database = getDatabase(firebaseApp);\n\nconst gsRef = storageRef(storage, 'gs://find-pokemon-67226.appspot.com');\nconst scoreRef = dataRef(database, 'high scores');\n\n\n//249 pokemon, from ID 0-248\nasync function selectMons() {\n    let monIDs = [];\n    let monCalls = [];\n    for (let i = 0; i < 5; i++) {\n      monIDs.push(Math.floor(Math.random() * 249));\n      monCalls.push(get(dataRef(database, `pokemon/${monIDs[i]}`)));\n    }\n    let pokeData = await Promise.all(monCalls);\n    let pickedPokes = [];\n    for (let mon of pokeData) {\n      pickedPokes.push({id: mon.val().id, name: mon.val().name})\n    }\n    return pickedPokes;\n}\n\nasync function getPokePics(pokeList) {\n  let monCalls = [];\n  for (let pokemon of pokeList) {\n    monCalls.push(getDownloadURL(storageRef(gsRef, pokemon.name + '.png')))\n  }\n\n  let monURLs = await Promise.all(monCalls);\n  let pokePics = [];\n  for (let url in monURLs) {\n    pokePics.push({id: pokeList[url].id, src: monURLs[url]})\n  }\n  return pokePics;\n  }\n\n\nfunction updateScores (latestScore, scoreList) {\n  for (let score in scoreList) {\n    if (scoreList[score].score < latestScore.score) \n      scoreList.splice(score, 1, latestScore, scoreList[score]);\n  }\n  scoreList.pop();\n  set(scoreRef, scoreList);\n  return scoreList;\n}\n\nfunction getScores() {\n  let scoreList;\n  onValue(scoreRef, (snapshot) => {\n    scoreList = snapshot.val();\n  });\n  return scoreList;\n}\n\n\n//check on this function\nasync function checkFound(pokeID, boxPos) {\n  let pokeCords;\n  let pokeData = await get(dataRef(database,`pokemon/${pokeID}`));\n  \n  get(dataRef(database,`pokemon/${pokeID}`)).then((snapshot) => {\n    if (snapshot.exists()) {\n      pokeCords = snapshot.val().location;\n    }\n  }).catch((error) => {\n    console.error(error);\n  });\n  let vertOverlap = Math.min(boxPos[1], pokeCords[1]) - Math.max(boxPos[0], pokeCords[0]);\n  let horizOverlap = Math.min(boxPos[3], pokeCords[3]) - Math.max(boxPos[2], pokeCords[2]);\n  let boxHeight = boxPos.top - boxPos.bottom;\n  let boxWidth = boxPos.right - boxPos.left;\n  if (vertOverlap * horizOverlap >= (boxHeight * boxWidth) / 2) return true;\n  else return false;\n}\n\n\nexport { selectMons, getPokePics, updateScores, getScores, checkFound }"]},"metadata":{},"sourceType":"module"}